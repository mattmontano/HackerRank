PROBLEM DESCRIPTION:
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output should consist of four columns (Doctor, Professor, Singer, and Actor) in that specific order, with their respective names listed alphabetically under each column.

Note: Print NULL when there are no more names corresponding to an occupation.

Input Format

The OCCUPATIONS table is described as follows:

Occupation will only contain one of the following values: Doctor, Professor, Singer or Actor.

Sample Input

Sample Output

Jenny    Ashley     Meera  Jane
Samantha Christeen  Priya  Julia
NULL     Ketty      NULL   Maria

Explanation

The first column is an alphabetically ordered list of Doctor names.
The second column is an alphabetically ordered list of Professor names.
The third column is an alphabetically ordered list of Singer names.
The fourth column is an alphabetically ordered list of Actor names.
The empty cell data for columns with less than the maximum number of names per occupation (in this case, the Professor and Actor columns) are filled with NULL values.-- Below are attempts at solving the HackerRank "Occupations" problem for SQL
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- FIRST ATTEMPT:
WITH temp AS(
    SELECT
        CASE
            WHEN occupation = 'Doctor' THEN name
        END,
        CASE
            WHEN occupation = 'Professor' THEN name
        END,
        CASE
            WHEN occupation = 'Singer' THEN name
        END,
        CASE
            WHEN occupation = 'Actor' THEN name
        END
    FROM occupations
)
SELECT *
FROM temp;

-- This first attempt successfully creates a CTE with columns for each of the occupations
-- When selecting all, NULL is filled in under each occupation where the occupation does not match for each column
-- Need to figure out a way to limit the amount of rows to be the maximum number of the most popular occupation
-- Names will also have to be ordered alphabetically
-- SECOND ATTEMPT will try to use four separate CTEs, one for eah occupation, and order those names alphabetically for each CTE

-- SECOND ATTEMPT:
WITH 
doctors AS(
    SELECT
        CASE
            WHEN occupation = 'Doctor' THEN name
        END AS doctor_names
    FROM occupations
),
professors AS(
    SELECT
        CASE
            WHEN occupation = 'Professor' THEN name
        END AS professor_names
    FROM occupations
),
singers AS(
    SELECT
        CASE
            WHEN occupation = 'Singer' THEN name
        END AS singer_names
    FROM occupations
),
actors AS(
    SELECT
        CASE
            WHEN occupation = 'Actor' THEN name
        END AS actor_names
    FROM occupations
)
SELECT doctors.doctor_names, professors.professor_names, singers.singer_names, actors.actor_names
FROM doctors, professors, singers, actors
WHERE doctor_names IS NOT NULL
AND professor_names IS NOT NULL
AND singer_names IS NOT NULL
AND actor_names IS NOT NULL;

-- This second attempt was NOT successful
-- However, it did work briefly for the first column of doctor names
-- I think I'm performing a join on all four of these CTEs as the result was an extremely long table
-- Need a way to output each column individually without joining them
-- Also still need to order by name alphabetically
-- I've also realized that I no longer need to use CASE because I'm creating individual CTEs for each occupation, can simply use basic WHERE logic

-- THIRD ATTEMPT:
WITH 
doctors AS(
    SELECT name AS d_names
    FROM occupations
    WHERE occupation = 'Doctor'
    ORDER BY name
),
professors AS(
    SELECT name AS p_names
    FROM occupations
    WHERE occupation = 'Professor'
    ORDER BY name
),
singers AS(
    SELECT name AS s_names
    FROM occupations
    WHERE occupation = 'Singer'
    ORDER BY name
),
actors AS(
    SELECT name AS a_names
    FROM occupations
    WHERE occupation = 'Actor'
    ORDER BY name
)
SELECT d_names, p_names, s_names, a_names
FROM doctors, professors, singers, actors;

-- Result is still incorrectly joining the CTEs
-- Individual CTEs are now properly ordered alphabetically

